import json
import requests
import os
import time
import logging
from datetime import datetime
import argparse
import sys

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Splunk configuration (use environment variables for production, defaults provided)
SPLUNK_HOST = os.environ.get("SPLUNK_HOST")
SPLUNK_PORT = os.environ.get("SPLUNK_PORT", "8088")
SPLUNK_TOKEN = os.environ.get("SPLUNK_TOKEN")
SPLUNK_INDEX = os.environ.get("SPLUNK_INDEX", "main")
SPLUNK_SOURCE = os.environ.get("SPLUNK_SOURCE", "python_script")
SPLUNK_SOURCETYPE = os.environ.get("SPLUNK_SOURCETYPE", "json")
SPLUNK_VERIFY_SSL = os.environ.get("SPLUNK_VERIFY_SSL", "True").lower() == "true"

# Check for required environment variables
if not all([SPLUNK_HOST, SPLUNK_TOKEN]):
    logging.error("SPLUNK_HOST and SPLUNK_TOKEN environment variables must be set.")
    sys.exit(1)

def send_to_splunk(event, timestamp=None):
    """Sends an event to Splunk via HEC."""
    headers = {
        "Authorization": f"Splunk {SPLUNK_TOKEN}",
        "Content-Type": "application/json"
    }

    payload = {
        "event": event,
        "index": SPLUNK_INDEX,
        "source": SPLUNK_SOURCE,
        "sourcetype": SPLUNK_SOURCETYPE
    }

    if timestamp:
        payload["time"] = timestamp

    try:
        response = requests.post(
            f"https://{SPLUNK_HOST}:{SPLUNK_PORT}/services/collector/event",
            headers=headers,
            json=payload,
            verify=SPLUNK_VERIFY_SSL,
            timeout=10
        )
        response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
        logging.debug(f"Sent payload: {payload}")
        logging.info(f"Successfully sent event to Splunk. Status Code: {response.status_code}")
        return True
    except requests.exceptions.HTTPError as http_err:
        logging.error(f"HTTP error sending event to Splunk: {http_err}")
        if response is not None:
            logging.error(f"Response Content: {response.text}")
        return False
    except requests.exceptions.ConnectionError as conn_err:
        logging.error(f"Connection error sending event to Splunk: {conn_err}")
        return False
    except requests.exceptions.Timeout as timeout_err:
        logging.error(f"Timeout error sending event to Splunk: {timeout_err}")
        return False
    except requests.exceptions.RequestException as e:
        logging.error(f"A general error occurred sending event to Splunk: {e}")
        return False

def process_json_file(file_path):
    """Reads a JSON file and sends each object to Splunk."""
    try:
        with open(file_path, "r") as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError as e:
                logging.error(f"Error decoding JSON in file {file_path}: {e}")
                return

        if isinstance(data, list):
            for item in data:
                timestamp = extract_timestamp(item)
                if send_to_splunk(item, timestamp):
                    time.sleep(0.5)
        elif isinstance(data, dict):
            timestamp = extract_timestamp(data)
            if send_to_splunk(data, timestamp):
                time.sleep(0.5)
        else:
            logging.error(f"Error: JSON data is neither a list nor a dictionary. Data type: {type(data)}")

    except FileNotFoundError:
        logging.error(f"Error: File not found: {file_path}")

def extract_timestamp(data_item):
    """Extracts timestamp from 'createdAt' field with improved error handling."""
    if "createdAt" in data_item:
        try:
            dt_object = datetime.fromisoformat(data_item["createdAt"].replace("Z", "+00:00"))
            return int(dt_object.timestamp())
        except ValueError as e:
            logging.warning(f"Invalid createdAt format: {data_item['createdAt']}. Skipping timestamp. Error: {e}")
    return None

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Send JSON data to Splunk via HEC.")
    parser.add_argument("file_path", help="Path to the JSON file.")
    parser.add_argument("-i", "--index", help="Splunk index (overrides environment variable)", default=None)
    parser.add_argument("-st", "--sourcetype", help="Splunk sourcetype (overrides environment variable)", default=None)
    args = parser.parse_args()

    if args.index:
        SPLUNK_INDEX = args.index
        logging.info(f"Overriding Splunk index with command line argument: {SPLUNK_INDEX}")
    if args.sourcetype:
        SPLUNK_SOURCETYPE = args.sourcetype
        logging.info(f"Overriding Splunk sourcetype with command line argument: {SPLUNK_SOURCETYPE}")

    process_json_file(args.file_path)
